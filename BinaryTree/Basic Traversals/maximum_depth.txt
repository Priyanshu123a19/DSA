104. Maximum Depth of Binary Tree
Solved
Easy
Topics
premium lock iconCompanies

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:

Input: root = [1,null,2]
Output: 2

 

Constraints:

    The number of nodes in the tree is in the range [0, 104].
    -100 <= Node.val <= 100





solutiuon.........................................................................................................................



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root,int & count){
        queue<TreeNode*>q;

        q.push(root);
        q.push(NULL);

        while(!q.empty()){

            //extract the first element of the tree
            TreeNode* temp=q.front();
            q.pop();

            if(temp==NULL){
                count++;

                if(!q.empty()){
                q.push(NULL);
                }
            }else{
                //this is the normal case just push the other elements of the tree
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }
            }

            //now over here we make some more ammendments over here

        }
    }
    int maxDepth(TreeNode* root) {
        //basic thing is that u have to find the levels of the tree 
        //that is the maximuk levels it can have

        int count=0;
        if(root==NULL){
            return 0;
        }
        helper(root,count);
        return count;
    }
};











alternate and best way...................................................................


//thats all!!!!!!!

int hlper(Node* root){
    if(root==NULL){
        return 0;
    }

    int left=helper(root->left);
    int right=helper(root->right);

    return max(left,height)+1;
}