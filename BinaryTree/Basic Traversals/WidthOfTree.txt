Given a binary tree, the diameter (also known as the width) is defined as the number of edges on the longest path between two leaf nodes in the tree. This path may or may not pass through the root. Your task is to find the diameter of the tree.

Examples:

Input: root[] = [1, 2, 3]

Output: 2
Explanation: The longest path has 2 edges (node 2 -> node 1 -> node 3).

Input: root[] = [5, 8, 6, 3, 7, 9]

Output: 4
Explanation: The longest path has 4 edges (node 3 -> node 8 -> node 5 -> node 6 -> node 9).

Constraints:
1 ≤ number of nodes ≤ 105
0 ≤ node->data ≤ 105


solution.......................................................................................................................................


/*
class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};

Node* newNode(int val) {
    return new Node(val);
}
*/

class Solution {
  public:
    int helper(Node*root,int & ans){
        if(root==NULL){
            return 0;
        }
        
        //now over here its very simple
        int left=helper(root->left,ans);
        int right= helper(root->right,ans);
        
        ans= max(ans,left+right);
        
        return max(left,right)+1;
    }
    int diameter(Node* root) {
        // Your code here
        //undersatnd the simple algo that if u want to findn the width what is it
        //thats the left longest hieght and the right longest hegith addition 
        //so this function find the hight and the width in congruece thats all!!!!!
        
        if(root==NULL){
            return 0;
        }
        
        //this is the place finall
        int ans=0;
        helper(root,ans);
        return ans;
    }
};