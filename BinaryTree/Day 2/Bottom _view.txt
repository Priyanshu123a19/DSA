Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the later one in the level order traversal is considered. For example, in the below diagram, 7 and 34 both are the bottommost nodes at a horizontal distance of 0 from the root, here 34 will be considered.

For the above tree, the output should be 5 8 34 22 25

Examples :

Input: root[] = [1, 3, 2]

Output: [3 1 2]
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.

Input: root[] = [10, 20, 30, 40, 60]
         
Output: [40 20 60 30]

Constraints:
1 <= number of nodes <= 105
1 <= node->data <= 105



solution.................................................................................................................




/*
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/

class Solution {
  public:
    vector<int> bottomView(Node *root) {
        // Your Code Here
        //for the bottom view again the horizontal distance concept and again carry on the torch
        
        
        vector<int>ans;
        if(root==NULL){
            return ans;
        }
        
        //now over here we will see the other things to initiate
        //queue with the current node n its hd
        queue<pair<Node*,int>>q;
        
        //map to store the latest thngs on each of the hd
        map<int,int>mp;
        q.push({root,0});
        while(!q.empty()){
            Node* front=q.front().first;
            
            int hd=q.front().second;
            
            q.pop();
            
            mp[hd]=front->data;
            
            //checking for the other things
            if(front->left!=NULL){
                //now get or use the left side if it exists
                q.push({front->left,hd-1});
            }
            if(front->right!=NULL){
                q.push({front->right,hd+1});
            }
        }
        
        //pushing back the ans
        for(auto i: mp){
            ans.push_back(i.second);
        }
        return ans;
    }
};