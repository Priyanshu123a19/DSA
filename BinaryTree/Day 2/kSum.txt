K Sum Paths
Difficulty: MediumAccuracy: 44.73%Submissions: 132K+Points: 4

Given a binary tree and an integer k, determine the number of downward-only paths where the sum of the node values in the path equals k. A path can start and end at any node within the tree but must always move downward (from parent to child).

Examples:

Input: k = 7   

Output: 3
Explanation: The following paths sum to k 
 

Input: k = 3

Output: 2 
Explanation: Path 1 : 1 -> 2 (Sum = 3) Path 2 : 3 (Sum = 3)

Constraints:
1 ≤ number of nodes ≤ 104
-100 ≤ node value ≤ 100
-109 ≤ k ≤ 109


solution..........................................................................................




/*
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    void helper(Node * root, int k,vector<int>&ans,int & count){
        //recusrsion used
        if(root==NULL){
            return;
        }
        ans.push_back(root->data);
        
        helper(root->left,k,ans,count);
        helper(root->right,k,ans,count);
        //add the current node check and and call 
        int sum=0;
        for(int i=ans.size()-1;i>=0;i--){
            sum+=ans[i];
            if(sum==k){
                count++;
            }
        }
        
        //now the left recursion 
        ans.pop_back();
    }
    int sumK(Node *root, int k) {
        // code here
        if(root==NULL){
            return 0;
        }
        
        vector<int>ans;
        int count=0;
        
        helper(root,k,ans,count);
        return count;
    }
};