Given the root of a binary tree, calculate the vertical order traversal of the binary tree.

For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).

The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.

Return the vertical order traversal of the binary tree.

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation:
Column -1: Only node 9 is in this column.
Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.
Column 1: Only node 20 is in this column.
Column 2: Only node 7 is in this column.

Example 2:

Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
Column -2: Only node 4 is in this column.
Column -1: Only node 2 is in this column.
Column 0: Nodes 1, 5, and 6 are in this column.
          1 is at the top, so it comes first.
          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.
Column 1: Only node 3 is in this column.
Column 2: Only node 7 is in this column.

Example 3:

Input: root = [1,2,3,4,6,5,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
This case is the exact same as example 2, but with nodes 5 and 6 swapped.
Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.

 

Constraints:

    The number of nodes in the tree is in the range [1, 1000].
    0 <= Node.val <= 1000






solution.....................................................................................................................................





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        //over here there is a simple logic and code for what  we are doing
         map<int, map<int, vector<int>>> nodes;

        // The queue stores the node pointer and its coordinates (hd, lvl).
        queue<pair<TreeNode*, pair<int, int>>> q;
        vector<vector<int>> ans;

        if (root == NULL) {
            return ans;
        }

        q.push({root, {0, 0}}); // Using initializer list for cleaner syntax

        while (!q.empty()) {
            pair<TreeNode*, pair<int, int>> temp = q.front();
            q.pop(); // CORRECTION 1: Added the missing pop() to avoid an infinite loop.

            // CORRECTION 2: Used .first and .second instead of () for member access.
            TreeNode* frontNode = temp.first;
            int hd = temp.second.first;
            int lvl = temp.second.second;

            // Store the node's value in our map.
            nodes[hd][lvl].push_back(frontNode->val); // Using frontNode->val as per TreeNode definition.

            if (frontNode->left != NULL) {
                // CORRECTION 3: Corrected the push syntax.
                q.push({frontNode->left, {hd - 1, lvl + 1}});
            }
            if (frontNode->right != NULL) {
                // CORRECTION 3: Corrected the push syntax.
                q.push({frontNode->right, {hd + 1, lvl + 1}});
            }
        }

        // CORRECTION 5: Reworked the logic to build the final answer correctly.
        for (auto i : nodes) {
            // i.first is the horizontal distance (hd)
            // i.second is the map<int, vector<int>> for that hd
            vector<int> col;
            for (auto j : i.second) {
                // j.first is the level (lvl)
                // j.second is the vector<int> of nodes at that (hd, lvl)
                
                // CORRECTION 4: Sort nodes if they are at the same position.
                sort(j.second.begin(), j.second.end());

                // Insert all elements from the sorted vector into the column vector.
                col.insert(col.end(), j.second.begin(), j.second.end());
            }
            ans.push_back(col);
        }

        return ans;
        
    }
};