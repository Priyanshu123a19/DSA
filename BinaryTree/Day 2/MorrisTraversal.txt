94. Binary Tree Inorder Traversal
Solved
Easy
Topics
premium lock iconCompanies

Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:

Input: root = [1,null,2,3]

Output: [1,3,2]

Explanation:

Example 2:

Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]

Output: [4,2,6,5,7,1,3,9,8]

Explanation:

Example 3:

Input: root = []

Output: []

Example 4:

Input: root = [1]

Output: [1]

 

Constraints:

    The number of nodes in the tree is in the range [0, 100].
    -100 <= Node.val <= 100

 
Follow up: Recursive solution is trivial, could you do it iteratively?



solution...................................................................................................


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* search(TreeNode * root){
        TreeNode* pred=root->left;

        while(pred->right!=NULL && pred->right!=root){
            pred=pred->right;
        }

        return pred;
    }
    vector<int> inorderTraversal(TreeNode* root) {
        //lets do this question with the help of morris traversal

        TreeNode* current=root;
        vector<int>ans;

        while(current!=NULL){
            //first condition where we check that the current nodes left exist or not

            if(current->left==NULL){
                ans.push_back(current->val);
                current=current->right;
            }else{
                //now here we need to make sure that we catch the pred correnctly
                TreeNode* pred=search(current);

                //now check for 2 conditions
                if(pred->right==NULL){
                    //now over here we will make a few things
                    pred->right=current;
                    current=current->left;
                }else{
                    pred->right=NULL;
                    ans.push_back(current->val);
                    current=current->right;
                }
            }

        }
        return ans;
    }
};