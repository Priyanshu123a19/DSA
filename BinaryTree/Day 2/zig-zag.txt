103. Binary Tree Zigzag Level Order Traversal
Solved
Medium
Topics
premium lock iconCompanies

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 2000].
    -100 <= Node.val <= 100

solution...........................................................................................................................



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {

        vector<vector<int>>result;
        if(root==NULL){
            return result;
        }

        //else over here more things to do for
        queue<TreeNode*>q;
        q.push(root);
        //true hwile going left to right
        //false for right to left
        bool flow=true;
        while(!q.empty()){

            int size=q.size();
            vector<int>ans(size);


            //traversing the whole queeu and storing the ans according to the flow

            for(int i=0;i<size;i++){

                //now over here just get the current element 
                //pop it 
                //insert its value accoring to the flow
                //see its childred in the similar order
                TreeNode*temp=q.front();
                q.pop();
                if(flow){
                    ans[i]=temp->val;
                }else{
                    ans[size-i-1]=temp->val;
                }

                //inserting the current nodes childred 
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }

            }
            //making flow reverse
            flow=!flow;
            result.push_back(ans);
        }
        return result;
    }
};