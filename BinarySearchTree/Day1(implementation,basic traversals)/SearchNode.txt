700. Search in a Binary Search Tree
Solved
Easy
Topics
premium lock iconCompanies

You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

 

Example 1:

Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

Example 2:

Input: root = [4,2,7,1,3], val = 5
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [1, 5000].
    1 <= Node.val <= 107
    root is a binary search tree.
    1 <= val <= 107



solution....................................................................................................


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root,int val,TreeNode* &ans,bool &flag){
        //now lets just make the new logic
        if(root==NULL){
            ans=NULL;
            flag=false;
            return;
        }

        //now normal case see where to go
        if(val==root->val){
            ans=root;
            flag=false;
            return;
        }
        if(val<root->val && flag){
            //since the value is smaller then it must be in the left part of the tree
            helper(root->left,val,ans,flag);
        }
        else if(val>root->val && flag){
            helper(root->right,val,ans,flag);
        }
    }
    TreeNode* searchBST(TreeNode* root, int val) {
        TreeNode* ans=NULL;
        bool flag=true;
        helper(root,val,ans,flag);
        return ans;
    }
};