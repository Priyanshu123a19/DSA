You are given root node of the BST and an integer key. You need to find the in-order successor and predecessor of the given key. If either predecessor or successor is not found, then set it to NULL.

Note:- In an inorder traversal the number just smaller than the target is the predecessor and the number just greater than the target is the successor. 

Examples :

Input: root[] = [8, 1, 9, N, 4, N, 10, 3, N, N, N], key = 8

Output: 4 9
Explanation: In the given BST the inorder predecessor of 8 is 4 and inorder successor of 8 is 9.

Input: root[] = [10, 2, 11, 1, 5, N, N, N, N, 3, 6, N, 4, N, N], key = 11

Output: 10 -1
Explanation: In given BST, the inorder predecessor of 11 is 10 whereas it does not have any inorder successor.

Input: root[] = [2, 1, 3], key = 3

Output: 2 -1
Explanation: In given BST, the inorder predecessor of 3 is 2 whereas it does not have any inorder successor.




solutoin ...................................................................................



/* BST Node
class Node
{
   public:
    int data;
    Node *left;
    Node *right;

    Node(int x){
        data = x;
        left = NULL;
        right = NULL;
    }
}; */

class Solution {
  public:   
    void helper(Node* root,vector<Node*>&ans){
        if(root==NULL){
            return;
        }
        
        helper(root->left,ans);
        ans.push_back(root);
        helper(root->right,ans);
    }
    vector<Node*> findPreSuc(Node* root, int key) {
        // code here
        //algo is simple just do the traversal and get the solution as that elemetn age wla as succressor 
        //peeche wla pred   
        vector<Node*>ans;
        helper(root,ans);
        vector<Node*>final;
        Node*ans1=NULL;
        Node*ans2=NULL;
        for (int i = 0; i < ans.size(); ++i) {
            if (ans[i]->data < key) {
                ans1 = ans[i];
            } else if (ans[i]->data > key) {
                ans2 = ans[i];
                break; // Found the successor, so we can stop.
            }
        }
        final.push_back(ans1);
        final.push_back(ans2);
        return final;
    }
};