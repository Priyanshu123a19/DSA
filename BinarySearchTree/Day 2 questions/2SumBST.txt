Given a Binary Search Tree(BST) and a target. Check whether there's a pair of Nodes in the BST with value summing up to the target. 

Examples:

Input: root = [7, 3, 8, 2, 4, N, 9], target = 12
       bst
Output: True
Explanation: In the binary tree above, there are two nodes (8 and 4) that add up to 12.

Input: root = [9, 5, 10, 2, 6, N, 12], target = 23
          bst-3
Output: False
Explanation: In the binary tree above, there are no such two nodes exists that add up to 23.

Constraints:

1 ≤ Number of Nodes ≤ 105
1 ≤ target ≤ 106



solution.........................................................................................................................



/*
Node is as follows
class Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    void helper(Node* root,vector<int>& ans){
        //base case
        if(root==NULL){
            return;
        }
        
        //now over here simple and effective thing that is LNR
        helper(root->left,ans);
        ans.push_back(root->data);
        helper(root->right,ans);
    }
    bool findTarget(Node *root, int target) {
        // your code here.
        //just find the inorder then two pointer se sum nikal le
        vector<int>ans;
        helper(root,ans);
        
        int i=0;
        int j=ans.size()-1;
        
        while(i<j){
            if(ans[i]+ans[j]==target){
                return true;
            }
            if(ans[i]+ans[j]<target){
                i++;
            }
            if(ans[i]+ans[j]>target){
                j--;
            }
        }
        return false;
    }
};