1008. Construct Binary Search Tree from Preorder Traversal
Solved
Medium
Topics
premium lock iconCompanies

Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

 

Example 1:

Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Example 2:

Input: preorder = [1,3]
Output: [1,null,3]

 

Constraints:

    1 <= preorder.length <= 100
    1 <= preorder[i] <= 1000
    All the values of preorder are unique.


solution...........................................................................................................


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(vector<int>& preorder,int &i,TreeNode* &root,int s,int e){
        //insert the current node first try left and then right
        TreeNode* temp=new TreeNode(preorder[i]);
        root=temp;
        i++;
        //now calling the recursion for the left side and then on the right side
        if(i<preorder.size() && preorder[i]<root->val && preorder[i]>s){
            //call for the left side
            helper(preorder,i,root->left,s,root->val);
        }
        if(i<preorder.size() && preorder[i]>root->val && preorder[i]<e){
            //calling the function for the right side
            helper(preorder,i,root->right,root->val,e);
        }      
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        //the simplest approac of this is that traverse and keep inserting accroding to the respective range that they hold
        //NLR preorder
        //so ultimately the node gets inserted where it needs to be inserted
        //so at each step we try to find that palce that suits the best for the root node where to insert it
        if(preorder.size()==0){
            return NULL;
        }
        int i=0;
        TreeNode* root=NULL;
        int s=INT_MIN;
        int e=INT_MAX;
        helper(preorder,i,root,s,e);

        return root;
    }
};