problem statement
Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.

Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.




solution.....


class Solution {
public:
    void helper(vector<int>&current,vector<vector<int>>&ans,int n,int k,int it){
        if(current.size()==k){
            ans.push_back(current);
            return;
        }

        for(int i=it;i<=n;i++){
            //adding the element
            //the only thing that we have to remember is that we can form the logic with just passing the durrent iteration and then continuing the next loop from that interation
            current.push_back(i);
            //recursive call
            helper(current,ans,n,k,i+1);
            current.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) {
        //using the backtracking logic over here
        vector<int>current;
        vector<vector<int>>ans;

        helper(current,ans,n,k,1);
        return ans;
    }
};