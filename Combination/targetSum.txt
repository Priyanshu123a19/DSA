You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

    For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".

Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

Example 2:

Input: nums = [1], target = 1
Output: 1

 

Constraints:

    1 <= nums.length <= 20
    0 <= nums[i] <= 1000
    0 <= sum(nums[i]) <= 1000
    -1000 <= target <= 1000




!//  Solution.......

 things to remember
 1....  the combination is just like a subarray but all the elements must be There
 2....  like a permutation where the elements are in order
 3....  here we just made a mistake of finding the permutation
 4....  remember in case of the combination problems no need for loop u can just use the index and keep on passing its value in the recursion call
 5....  no need for any current array or something like that in this problem

class Solution {
public:
    void helper(vector<int>&nums,int target,int& ans,int sum,int index){
        if (index == nums.size()) {
            // THEN, check if the sum is what we wanted.
            if (sum == target) {
                ans++;
            }
            // We must return here to stop this path of recursion.
            return;
        }

        //first case adding the element
        helper(nums,target,ans,sum+nums[index],index+1);

        helper(nums,target,ans,sum-nums[index],index+1);
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int ans=0;
        int sum=0;
        int index=0;

        helper(nums,target,ans,sum,index);
        return ans;
    }
};