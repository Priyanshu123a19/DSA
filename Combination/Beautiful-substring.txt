problem....
A happy string is a string that:

    consists only of letters of the set ['a', 'b', 'c'].
    s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).

For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

 

Example 1:

Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".

Example 2:

Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.

Example 3:

Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab"





ans.....

class Solution {
public:
    void helper(vector<string>&ans,string &current,char lastvisited,int n,vector<char>arr){
        if(current.size()==n){
            ans.push_back(current);
            return;
        }

        //now over here we can add some more recursion calls
        for(int i=0;i<arr.size();i++){
            if(arr[i]==lastvisited){
                continue;
            }

            //adding and recursion call
            current.push_back(arr[i]);
            char temp=lastvisited;
            lastvisited=arr[i];
            helper(ans,current,lastvisited,n,arr);
            current.pop_back();
            lastvisited=temp;
        }
    }
    string getHappyString(int n, int k) {
        vector<string>ans;
        string current;
        vector<char>arr={'a','b','c'};
        char lastvisited='x';
        helper(ans,current,lastvisited,n,arr);
        if(k<=ans.size()){
        return ans[k-1];
        }else{
            return "";
        }
    }
};