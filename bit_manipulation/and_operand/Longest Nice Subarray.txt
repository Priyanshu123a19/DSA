You are given an array nums consisting of positive integers.

We call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.

Return the length of the longest nice subarray.

A subarray is a contiguous part of an array.

Note that subarrays of length 1 are always considered nice.

 

Example 1:

Input: nums = [1,3,8,48,10]
Output: 3
Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:
- 3 AND 8 = 0.
- 3 AND 48 = 0.
- 8 AND 48 = 0.
It can be proven that no longer nice subarray can be obtained, so we return 3.

Example 2:

Input: nums = [3,1,5,11,13]
Output: 1
Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.



solution......................................................................................................................



class Solution {
public:
    int longestNiceSubarray(vector<int>& nums) {
        //over here we will make sure that the set bits are tracked
        int current_or=0;
        int maxLen=0;
        int j=0;
        //now lets traverse , upgrade and check
        for(int i=0;i<nums.size();i++){
            //now over here we first check for the current element
            while((current_or&nums[i])!=0){
                //remove the left element like sliding window
                current_or^=nums[j];
                j++;
            }

            //if not the make it added
            current_or|=nums[i];
            maxLen=max(maxLen,i-j+1);
        }
        return maxLen;
    }
};




