PROBLEM STATEMENT...............

136. Single Number
Solved
Easy
Topics
premium lock iconCompanies
Hint

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]

Output: 1

Example 2:

Input: nums = [4,1,2,1,2]

Output: 4

Example 3:

Input: nums = [1]

Output: 1

 

Constraints:

    1 <= nums.length <= 3 * 104
    -3 * 104 <= nums[i] <= 3 * 104
    Each element in the array appears twice except for one element which appears only once.


Solution

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        //the xor of similar numbers always result in zeros

        sort(nums.begin(),nums.end());

        for(int i=0;i<nums.size();i+=2){
            //now over here we can direclty xor them to see the result as zero and whereever we will get zero we rertuern that
            if(i==nums.size()-1){
                return nums[i];
            } 
            int current=nums[i];
            int next=nums[i+1];

            //lets try to find out the xor now
            if((current^next)==0){
                continue;
            }
            else {
                return nums[i];
            }
        }
        return 0;
    }
};