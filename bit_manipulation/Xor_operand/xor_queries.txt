1310. XOR Queries of a Subarray
Solved
Medium
Topics
premium lock iconCompanies
Hint

You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].

For each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti] ).

Return an array answer where answer[i] is the answer to the ith query.

 

Example 1:

Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8

Example 2:

Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]



solution....................................................................



class Solution {
public:
    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {
        //easy peasy lemon squeezy 
        //find the prefix array that contains xor upto that indice element
        //then simply for each of the pairs   just find the xor till that right element and again xor it with the left elemnet prefixed xor
        //u will find the one for elenebnt between that range
        vector<int>ans;
        vector<int>pref;
        int n=arr.size();
        int current=arr[0];
        pref.push_back(current);
        for(int i=1;i<n;i++){
            current^=arr[i];
            pref.push_back(current);
        }

        //now just find for each of them
        for(int i=0;i<queries.size();i++){
            //now u can find the xor for the ranges
            if(queries[i][0]==0){
                ans.push_back(pref[queries[i][1]]);
            }else{
            int req=pref[queries[i][1]]^pref[queries[i][0]-1];
            ans.push_back(req);
            }
        }

        return ans;
    }
};