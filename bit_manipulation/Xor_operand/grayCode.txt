89. Gray Code
Solved
Medium
Topics
premium lock icon
Companies
An n-bit gray code sequence is a sequence of 2n integers where:

Every integer is in the inclusive range [0, 2n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and
The binary representation of the first and last integers differs by exactly one bit.
Given an integer n, return any valid n-bit gray code sequence.

 

Example 1:

Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit
Example 2:

Input: n = 1
Output: [0,1]



solution...............................................................................


class Solution {
public:
    vector<int> grayCode(int n) {
        //this is a problem that is based on a formula 
        //so to count suppose till 2to the pow 2
        //then 4 numbers req 0,1,2,3

        //so what happens is that we traverse in this direction only and then get the desired code for that number 
        //eg for 0 we will do 0^(0>>1)
        //so in this way we get the grey code for that number
        //ultimately after generating all of them they will already be in that sequence where diff between each of them will be of one bit only
        

        //amazing trick to get the size
        int size=1<<n;
        vector<int>ans;
        //this new function will make sure that we only use size in this arrya that is defined by us ......optional and is a good practice
        ans.reserve(size);
        for(int i=0;i<size;i++){
            //now gettting the number for each of them
            ans.push_back(i^(i>>1));
        }

        return ans;
    }
};




